#!/usr/bin/env python
# ftclient
# CS372 Spring 2018
# -----------------
# Name: Zachary Thomas
# Email: thomasza@oregonstate.edu
# Date: 5/19/2018
# ------------------------------------
# Set up file transfer with server.
# ------------------------------------
# Cited references:
# Lecture 15: Socket Programming Primer 

from socket import *
import sys

# start_up
# -------
# setup the server, get a handle, listen for connections.
# when a connection is made accept and receive messages
# until one side quits. When that happens resume listening.
def start_up():
	#confirm command line arguments include port number
	if (len(sys.argv) < 5 or len(sys.argv) > 6):
		print "Useage: " + str(sys.argv[0]) + " [server address] [server port] [command] [filename] [data port]" 
		sys.exit(0)

	serverName = sys.argv[1]
	serverPort = int(sys.argv[2])
	command	= sys.argv[3]

	#if we don't enter a file name then take the dataPort only
	if (len(sys.argv) == 6):
		fileName = sys.argv[4]
		dataPort = int(sys.argv[5])
	else:
		dataPort = int(sys.argv[4])

	#confirm a valid command was used
	if (command != "-l" and command != "-g"):
		print "Invalid command. Valid commands are -g or -l"
		sys.exit(0)

	#attempt to connect to the server
	clientSocket = socket(AF_INET, SOCK_STREAM)
	try:
		clientSocket.connect((serverName, serverPort))
	except:
    		print "Failed to connect to server"
		sys.exit(1)

	#send a transfer request
	request = str(dataPort) + command + fileName + "\n"
	clientSocket.send(request)
	
	#attempt to connect for transfer
	dataSocket = socket(AF_INET, SOCK_STREAM)
	try:
		dataSocket.connect((serverName, dataPort))
	except:
    		print "Failed to connect to server data port"
		sys.exit(1)

	#receive file transfer	
	fileContents = dataSocket.recv(5000000)
	print'From Server:', fileContents
	clientSocket.close()	
	dataSocket.close()
	
# receive_message
# ------------
# get a message from the client.
# If the client quit we return to listening
# for a new connection.
#
# connectionSocket: The current socket being used.
#
# return: Returns true if received a message. Returns false if the client quit.
def receive_message(connectionSocket):
	#get message from client and remove newline
	clientMessage = connectionSocket.recv(1024)
	clientMessage = clientMessage.rstrip()

	#if client quit stop here
	if(clientMessage == "\quit"):
		connectionSocket.close()
		return False
	
	#print clients message	
	print clientMessage
	return True

# send_message
# ------------
# send a message to the client or quit.
# If we quit let the client know.
#
# handle: The handle the user selected previously.
# connectionSocket: The current socket being used.
#
# return: Returns true if we sent a message. Returns false if we quit.
def send_message(handle, connectionSocket):
	#get message from user
	serverMessage = raw_input(handle + "> ")
		
	#if we typed /quit instead of a message let client know
	if(serverMessage == "\quit"):
		connectionSocket.send(serverMessage + '\n')
		connectionSocket.close()
		return False

	#send message to client
	connectionSocket.send(handle + "> " + serverMessage[:500] + '\n')
	return True

def main():
	start_up()

if __name__ == "__main__":
	main()
